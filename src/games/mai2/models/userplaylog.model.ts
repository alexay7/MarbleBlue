import mongoose, {Schema, SchemaTypes} from "mongoose";
import type {Mai2UserPlaylogType} from "../types/userplaylog.types.ts";

const mai2UserPlaylogSchema = new Schema<Mai2UserPlaylogType>({
	_id: {type: SchemaTypes.ObjectId, auto: true},

	userId: {type: String, ref: "Card", required: true},

	orderId: {type: Number},
	version: {type: Number},
	placeId: {type: Number},
	placeName: {type: String},
	loginDate: {type: SchemaTypes.BigInt},
	playDate: {type: Date},
	userPlayDate: {type: Date},
	type: {type: Number},
	musicId: {type: Number},
	level: {type: Number},
	trackNo: {type: Number},
	vsMode: {type: Number},
	vsUserName: {type: String},
	vsStatus: {type: Number},
	vsUserRating: {type: Number},
	vsUserAchievement: {type: Number},
	vsUserGradeRank: {type: Number},
	vsRank: {type: Number},
	playerNum: {type: Number},
	playedUserId1: {type: SchemaTypes.BigInt},
	playedUserName1: {type: String},
	playedMusicLevel1: {type: Number},
	playedUserId2: {type: SchemaTypes.BigInt},
	playedUserName2: {type: String},
	playedMusicLevel2: {type: Number},
	playedUserId3: {type: SchemaTypes.BigInt},
	playedUserName3: {type: String},
	playedMusicLevel3: {type: Number},
	characterId1: {type: Number},
	characterLevel1: {type: Number},
	characterAwakening1: {type: Number},
	characterId2: {type: Number},
	characterLevel2: {type: Number},
	characterAwakening2: {type: Number},
	characterId3: {type: Number},
	characterLevel3: {type: Number},
	characterAwakening3: {type: Number},
	characterId4: {type: Number},
	characterLevel4: {type: Number},
	characterAwakening4: {type: Number},
	characterId5: {type: Number},
	characterLevel5: {type: Number},
	characterAwakening5: {type: Number},
	achievement: {type: Number},
	deluxscore: {type: Number},
	scoreRank: {type: Number},
	maxCombo: {type: Number},
	totalCombo: {type: Number},
	maxSync: {type: Number},
	totalSync: {type: Number},
	tapCriticalPerfect: {type: Number},
	tapPerfect: {type: Number},
	tapGreat: {type: Number},
	tapGood: {type: Number},
	tapMiss: {type: Number},
	holdCriticalPerfect: {type: Number},
	holdPerfect: {type: Number},
	holdGreat: {type: Number},
	holdGood: {type: Number},
	holdMiss: {type: Number},
	slideCriticalPerfect: {type: Number},
	slidePerfect: {type: Number},
	slideGreat: {type: Number},
	slideGood: {type: Number},
	slideMiss: {type: Number},
	touchCriticalPerfect: {type: Number},
	touchPerfect: {type: Number},
	touchGreat: {type: Number},
	touchGood: {type: Number},
	touchMiss: {type: Number},
	breakCriticalPerfect: {type: Number},
	breakPerfect: {type: Number},
	breakGreat: {type: Number},
	breakGood: {type: Number},
	breakMiss: {type: Number},
	isTap: {type: Boolean},
	isHold: {type: Boolean},
	isSlide: {type: Boolean},
	isTouch: {type: Boolean},
	isBreak: {type: Boolean},
	isCriticalDisp: {type: Boolean},
	isFastLateDisp: {type: Boolean},
	fastCount: {type: Number},
	lateCount: {type: Number},
	isAchieveNewRecord: {type: Boolean},
	isDeluxscoreNewRecord: {type: Boolean},
	comboStatus: {type: Number},
	syncStatus: {type: Number},
	isClear: {type: Boolean},
	beforeRating: {type: Number},
	afterRating: {type: Number},
	beforeGrade: {type: Number},
	afterGrade: {type: Number},
	afterGradeRank: {type: Number},
	beforeDeluxRating: {type: Number},
	afterDeluxRating: {type: Number},
	isPlayTutorial: {type: Boolean},
	isEventMode: {type: Boolean},
	isFreedomMode: {type: Boolean},
	playMode: {type: Number},
	isNewFree: {type: Boolean},
	trialPlayAchievement: {type: Number},
	extNum1: {type: Number},
	extNum2: {type: Number},
	extNum4: {type: Number},
	extBool1: {type: Boolean},
	extBool2: {type: Boolean},
	extBool3: {type: Boolean},
});

mai2UserPlaylogSchema.index({userId: 1, playDate: -1});

export const Mai2UserPlaylogModel = mongoose.model<Mai2UserPlaylogType>("Mai2UserPlaylog", mai2UserPlaylogSchema);