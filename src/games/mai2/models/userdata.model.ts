import mongoose, {Schema, SchemaTypes} from "mongoose";
import type {Mai2UserDataType} from "../types/userdata.types.ts";

const mai2UserDataSchema = new Schema<Mai2UserDataType>({
	_id: {type: SchemaTypes.ObjectId, auto: true},

	userId: {type: String, ref: "Card", required: true},
	version: {type: Number, required: true},

	accessCode: {type: String},
	userName: {type: String},
	isNetMember: {type: Number},
	point: {type: Number},
	totalPoint: {type: Number},
	iconId: {type: Number},
	plateId: {type: Number},
	titleId: {type: Number},
	partnerId: {type: Number},
	frameId: {type: Number},
	selectMapId: {type: Number},
	totalAwake: {type: Number},
	gradeRating: {type: Number},
	musicRating: {type: Number},
	playerRating: {type: Number},
	highestRating: {type: Number},
	gradeRank: {type: Number},
	classRank: {type: Number},
	courseRank: {type: Number},
	charaSlot: {type: [Number], default: []},
	charaLockSlot: {type: [Number], default: []},
	contentBit: {type: Number},
	playCount: {type: Number},
	currentPlayCount: {type: Number},
	renameCredit: {type: Number},
	mapStock: {type: Number},
	eventWatchedDate: {type: Date},
	lastGameId: {type: String},
	lastRomVersion: {type: String},
	lastDataVersion: {type: String},
	lastLoginDate: {type: Date},
	lastPlayDate: {type: Date},
	lastPlayCredit: {type: Number},
	lastPlayMode: {type: Number},
	lastPlaceId: {type: Number},
	lastPlaceName: {type: String},
	lastAllNetId: {type: Number},
	lastRegionName: {type: String},
	lastClientId: {type: String},
	lastCountryCode: {type: String},
	lastSelectEMoney: {type: Number},
	lastSelectTicket: {type: Number},
	lastSelectCourse: {type: Number},
	lastCountCourse: {type: Number},
	firstGameId: {type: String},
	firstRomVersion: {type: String},
	firstDataVersion: {type: String},
	firstPlayDate: {type: Date},
	compatibleCmVersion: {type: String},
	dailyBonusDate: {type: Date},
	dailyCourseBonusDate: {type: Date},
	lastPairLoginDate: {type: Date},
	lastTrialPlayDate: {type: Date},
	playVsCount: {type: Number},
	playSyncCount: {type: Number},
	winCount: {type: Number},
	helpCount: {type: Number},
	comboCount: {type: Number},
	totalDeluxscore: {type: Number},
	totalBasicDeluxscore: {type: Number},
	totalAdvancedDeluxscore: {type: Number},
	totalExpertDeluxscore: {type: Number},
	totalMasterDeluxscore: {type: Number},
	totalReMasterDeluxscore: {type: Number},
	totalSync: {type: Number},
	totalBasicSync: {type: Number},
	totalAdvancedSync: {type: Number},
	totalExpertSync: {type: Number},
	totalMasterSync: {type: Number},
	totalReMasterSync: {type: Number},
	totalAchievement: {type: Number},
	totalBasicAchievement: {type: Number},
	totalAdvancedAchievement: {type: Number},
	totalExpertAchievement: {type: Number},
	totalMasterAchievement: {type: Number},
	totalReMasterAchievement: {type: Number},
	playerOldRating: {type: Number},
	playerNewRating: {type: Number},
	banState: {type: Number},
	friendRegistSkip: {type: Number},
	dateTime: {type: SchemaTypes.BigInt}
});

mai2UserDataSchema.index({userId: 1, version: 1}, {unique: true});

export const Mai2UserDataModel = mongoose.model<Mai2UserDataType>("Mai2UserData", mai2UserDataSchema);