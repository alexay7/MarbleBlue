import mongoose, {Schema, SchemaTypes} from "mongoose";
import type {GekiUserPlaylogType} from "../types/userplaylog.types.ts";

const gekiUserPlaylogSchema = new Schema<GekiUserPlaylogType>({
	_id: {type: SchemaTypes.ObjectId, auto: true},

	userId: {type: String, ref: "Card", required: true},

	sortNumber: {type: SchemaTypes.BigInt},
	placeId: {type: Number},
	placeName: {type: String},
	playDate: {type: Date},
	userPlayDate: {type: Date},
	musicId: {type: Number},
	level: {type: Number},
	playKind: {type: Number},
	eventId: {type: SchemaTypes.BigInt},
	eventName: {type: String},
	eventPoint: {type: Number},
	playedUserId1: {type: SchemaTypes.BigInt},
	playedUserId2: {type: SchemaTypes.BigInt},
	playedUserId3: {type: SchemaTypes.BigInt},
	playedUserName1: {type: String},
	playedUserName2: {type: String},
	playedUserName3: {type: String},
	playedMusicLevel1: {type: Number},
	playedMusicLevel2: {type: Number},
	playedMusicLevel3: {type: Number},
	cardId1: {type: Number},
	cardId2: {type: Number},
	cardId3: {type: Number},
	cardLevel1: {type: Number},
	cardLevel2: {type: Number},
	cardLevel3: {type: Number},
	cardAttack1: {type: Number},
	cardAttack2: {type: Number},
	cardAttack3: {type: Number},
	bossCharaId: {type: Number},
	bossLevel: {type: Number},
	bossAttribute: {type: Number},
	clearStatus: {type: Number},
	techScore: {type: Number},
	techScoreRank: {type: Number},
	battleScore: {type: Number},
	battleScoreRank: {type: Number},
	platinumScore: {type: Number},
	platinumScoreStar: {type: Number},
	maxCombo: {type: Number},
	judgeMiss: {type: Number},
	judgeHit: {type: Number},
	judgeBreak: {type: Number},
	judgeCriticalBreak: {type: Number},
	rateTap: {type: Number},
	rateHold: {type: Number},
	rateFlick: {type: Number},
	rateSideTap: {type: Number},
	rateSideHold: {type: Number},
	bellCount: {type: Number},
	totalBellCount: {type: Number},
	damageCount: {type: Number},
	overDamage: {type: Number},
	isTechNewRecord: {type: Boolean},
	isBattleNewRecord: {type: Boolean},
	isOverDamageNewRecord: {type: Boolean},
	isFullCombo: {type: Boolean},
	isFullBell: {type: Boolean},
	isAllBreak: {type: Boolean},
	playerRating: {type: Number},
	battlePoint: {type: Number},
});

gekiUserPlaylogSchema.index({userId: 1}, {unique: false});

export const GekiUserPlaylog = mongoose.model<GekiUserPlaylogType>("GekiUserPlaylog", gekiUserPlaylogSchema);